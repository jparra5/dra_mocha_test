# NLS_MESSAGEFORMAT_NONE
# NLS_ENCODING=UTF-8
ExtName=(Experimental) DRA UT Decision Gate
ExtDesc=Executes Javascript/Node or Java tests using Sauce Labs.
ExtMessage=This extension executes Java or Javascript tests against Sauce Labs.  Tests and the job configuration should externalize HOST, PORT, and APP_URL as environment properties.  Add the following command into the deploy job and export CF_APP_NAME as an environment property. 'export CF_APP_NAME="$CF_APP"'.

PROJECT_KEY_KEY=DRA Project Key
PROJECT_KEY_DESC=DRA Project Key from the Registration API (<a href="http://da.oneibmcloud.com/apidocs/#api-Register-PostProject" target="_blank">http://da.oneibmcloud.com/apidocs/#api-Register-PostProject</a>)<script>function DraUtDecisionGate(ctx){this.draInputId=0; this.testCaseList=[]; this.idList=[]; this.grandParent=null; this.parent=null; console.log( "this: " ); console.log( ctx ); var scriptTag=document.getElementsByTagName( 'script' ); scriptTag=scriptTag[ scriptTag.length - 1]; var parentTag=scriptTag.parentNode; this.ctx=parentTag; if( window.jQuery ){this.ctx=$( '[for$="ibm.devops.services.pipeline.dra_ut_decision_gate-TEST_TOOL_SELECT"]' ).siblings( ".help-text:not([DraUtDecisionGate])" ); this.ctx.attr( 'DraUtDecisionGate', '' ); this.init();}else{window.addEventListener( "load", function(){$( this.ctx ).attr( 'DraUtDecisionGate', '' ); this.init();}.bind( this ) );}}DraUtDecisionGate.prototype.init=function(){console.log( this ); console.log( $( this.ctx ).parent().parent() ); this.grandParent=$( this.ctx ).parent().parent(); this.grandParent.children().css( "padding-left", "25px" ); this.grandParent.children().eq(0).css( "padding-left", "0px" ); this.grandParent.children().eq(1).css( "padding-left", "0px" ); this.grandParent.children().eq(1).after( "<label>Unit Test</label>" ); this.grandParent.children().eq(6).after( "<label>Coverage</label>" ); this.parent=this.grandParent.children().eq(13); this.parent.find( "input" ).addClass( "hidden" ); this.loadCurrentTestCases(); this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><button class="btn btn-primary">Add</button></div>'); this.parent.children( 'div:last' ).children( ':button' ).on( 'click', function( event ){var ctx=event.currentTarget; console.log( ctx ); this.add();}.bind( this ) );};DraUtDecisionGate.prototype.loadCurrentTestCases=function(){var str=this.parent.find("input").val(); console.log( str ); if( str=="" ){this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" style="display:inline; width:initial;" ><button class="btn btn-primary" style="width: 74px;">Save</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;">Remove</button></div>'); this.parent.children( 'div:last' ).children( '.btn-primary' ).on( 'click', function( event ){this.editOrSave( event.currentTarget );}.bind( this ) ); this.parent.children( 'div:last' ).children( '.btn-danger' ).on( 'click', function( event ){this.remove( event.currentTarget );}.bind( this ) ); this.draInputId++;}else{var pastTestCases=str.split( "," ); for( var i=0 ; i < pastTestCases.length ; i++ ){this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" value="' + pastTestCases[ i] + '" style="display:inline; width:initial;" disabled><button class="btn btn-primary" style="width: 74px;">Edit</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;">Remove</button></div>'); this.parent.children( 'div:last' ).children( '.btn-primary' ).on( 'click', function( event ){this.editOrSave( event.currentTarget );}.bind( this ) ); this.parent.children( 'div:last' ).children( '.btn-danger' ).on( 'click', function( event ){this.remove( event.currentTarget );}.bind( this ) ); this.testCaseList[ this.draInputId]=pastTestCases[ i]; this.draInputId++;}}};DraUtDecisionGate.prototype.add=function(){this.parent.children( "div:last" ).before( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" style="display:inline; width:initial;" ><button class="btn btn-primary" style="width: 74px;">Save</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;">Remove</button></div>'); this.parent.children( 'div:nth-last-child(2)' ).children( '.btn-primary' ).on( 'click', function( event ){this.editOrSave( event.currentTarget );}.bind( this ) ); this.parent.children( 'div:nth-last-child(2)' ).children( '.btn-danger' ).on( 'click', function( event ){this.remove( event.currentTarget );}.bind( this ) ); this.draInputId++;};DraUtDecisionGate.prototype.editOrSave=function( ctx ){var value=$( ctx ).html(); if( value=="Edit" ){$( ctx ).html( "Save" ); $( ctx ).siblings( "input" ).prop('disabled', false);}else{$( ctx ).html( "Edit" ); $( ctx ).siblings( "input" ).prop('disabled', true); var inputValue=$( ctx ).siblings( "input" ).val(); var inputId=$( ctx ).siblings( "input" ).attr( "dra-input-id" ); this.testCaseList[ inputId]=inputValue; this.store( ctx );}};DraUtDecisionGate.prototype.store=function( ctx ){var list=""; for( var i=0 ; i < this.testCaseList.length ; i++ ){if( typeof( this.testCaseList[ i] ) !="undefined" ){console.log( "id: " + i + ", testcase: " + this.testCaseList[ i] ); list +=this.testCaseList[ i] + ",";}}list=list.substring(0, list.length-1); $( ctx ).parent().siblings( "input" ).val( list );};DraUtDecisionGate.prototype.remove=function( ctx ){var inputId=$( ctx ).siblings( "input" ).attr( "dra-input-id" ); delete this.testCaseList[ inputId]; this.store( ctx ); $( ctx ).parent().remove();};</script>

COMMAND_KEY=Custom Test Execution Command:
COMMAND_DESC=Enter the command(s) used to execute the tests for the project.

TEST_TOOL_SELECT_KEY=Tool
TEST_TOOL_SELECT_DESC=Select the tool being used to run unit tests.<script>new DraUtDecisionGate()</script>
TEST_TOOL_OPTION_1_KEY=None
TEST_TOOL_OPTION_2_KEY=Mocha
TEST_TOOL_OPTION_3_KEY=Mocha Karma

TEST_LOG_FILE_KEY=Log File
TEST_LOG_FILE_DESC=Location of the log file generated by the tool.
MINIMUM_SUCCESS_RATE_KEY=Minimum Success Rate
MINIMUM_SUCCESS_RATE_DESC=Minimum allowed test case success rate.
CHECK_TEST_REGRESSION_KEY=Check for Regression
CHECK_TEST_REGRESSION_DESC=Enables a check on test case regression.

COVERAGE_TOOL_SELECT_KEY=Tool
COVERAGE_TOOL_SELECT_DESC=Select the tool being used to run coverage.
COVERAGE_TOOL_OPTION_1_KEY=None
COVERAGE_TOOL_OPTION_2_KEY=BlanketJS
COVERAGE_TOOL_OPTION_3_KEY=Istanbul

COVERAGE_LOG_FILE_KEY=Log File
COVERAGE_LOG_FILE_DESC=Location of the log file generated by the tool.
MINIMUM_COVERAGE_RATE_KEY=Minimum Coverage Rate
MINIMUM_COVERAGE_RATE_DESC=Minimum allowed file coverage rate.
CHECK_COVERAGE_REGRESSION_KEY=Check for Regression
CHECK_COVERAGE_REGRESSION_DESC=Enables a check on coverage regression.
COVERAGE_REGRESSION_THRESHOLD_KEY=Coverage Regression Threshold
COVERAGE_REGRESSION_THRESHOLD_DESC=Allowable coverage regression threshold.

CRITICAL_TESTCASES_KEY=DRA Critical Test Cases
CRITICAL_TESTCASES_DESC=List of test cases that must be successful.

