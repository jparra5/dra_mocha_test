# NLS_MESSAGEFORMAT_NONE
# NLS_ENCODING=UTF-8
ExtName=(Experimental) DRA UT Decision Gate
ExtDesc=Executes Javascript/Node or Java tests using Sauce Labs.
ExtMessage=This extension executes Java or Javascript tests against Sauce Labs.  Tests and the job configuration should externalize HOST, PORT, and APP_URL as environment properties.  Add the following command into the deploy job and export CF_APP_NAME as an environment property. 'export CF_APP_NAME="$CF_APP"'.

USER_ID_KEY=Username - DRA TEST
USER_ID_DESC=The Sauce Labs username.  Tests should use the SAUCE_USERNAME environment variable..

PROJECT_KEY_KEY=DRA Project Key
PROJECT_KEY_DESC=DRA Project Key from the Registration API (<a href="http://da.oneibmcloud.com/apidocs/#api-Register-PostProject" target="_blank">http://da.oneibmcloud.com/apidocs/#api-Register-PostProject</a>)<script>dra={};dra.uiController={draInputId: 0, testCaseList: [], idList: [], grandParent: null, parent: null, init: function(){this.grandParent=$( $( "[data-extension-id='ibm.devops.services.pipeline.dra_ut_decision_gate']" )[3] ).children(); this.parent=this.grandParent.eq(12); this.grandParent.css("padding-left", "25px"); this.grandParent.eq(0).css("padding-left", "0px"); this.grandParent.eq(0).after("<label>Unit Test</label>"); this.grandParent=$( $( "[data-extension-id='ibm.devops.services.pipeline.dra_ut_decision_gate']" )[3] ).children(); this.grandParent.eq(5).after("<label>Coverage</label>"); this.grandParent=$( $( "[data-extension-id='ibm.devops.services.pipeline.dra_ut_decision_gate']" )[3] ).children(); this.parent=this.grandParent.eq(12); this.parent.find("input").addClass( "hidden" ); this.loadCurrentTestCases(); this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><button class="btn btn-primary" onclick="dra.uiController.add();">Add</button></div>');}, loadCurrentTestCases: function(){var str=this.parent.find("input").val(); console.log( str ); if( str=="" ){this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" style="display:inline; width:initial;" ><button class="btn btn-primary" onclick="dra.uiController.editOrSave(this);" style="width: 74px;">Save</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;" onclick="dra.uiController.remove(this);">Remove</button></div>'); this.draInputId++;}else{var pastTestCases=str.split( "," ); for( var i=0 ; i < pastTestCases.length ; i++ ){this.parent.append( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" value="' + pastTestCases[ i] + '" style="display:inline; width:initial;" disabled><button class="btn btn-primary" onclick="dra.uiController.editOrSave(this);" style="width: 74px;">Edit</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;" onclick="dra.uiController.remove(this);">Remove</button></div>'); this.testCaseList[ this.draInputId]=pastTestCases[ i]; this.draInputId++;}}}, editOrSave: function( ctx ){var value=$( ctx ).html(); if( value=="Edit" ){$( ctx ).html( "Save" ); $( ctx ).siblings( "input" ).prop('disabled', false);}else{$( ctx ).html( "Edit" ); $( ctx ).siblings( "input" ).prop('disabled', true); var inputValue=$( ctx ).siblings( "input" ).val(); var inputId=$( ctx ).siblings( "input" ).attr( "dra-input-id" ); this.testCaseList[ inputId]=inputValue; this.store( ctx );}}, add: function(){this.parent.children( "div:last" ).before( '<div style="display: table; margin:0 auto; margin-top:5px"><input id="" class="form-control" dra-input-id="' + this.draInputId + '" type="input" style="display:inline; width:initial;" ><button class="btn btn-primary" onclick="dra.uiController.editOrSave(this);" style="width: 74px;">Save</button><button class="btn btn-danger" style="background-color:#f04e36;border-color:#f04e36;" onclick="dra.uiController.remove(this);">Remove</button></div>'); this.draInputId++;}, store: function( ctx ){var list=""; for( var i=0 ; i < this.testCaseList.length ; i++ ){if( typeof( this.testCaseList[ i] ) !="undefined" ){console.log( "id: " + i + ", testcase: " + this.testCaseList[ i] ); list +=this.testCaseList[ i] + ",";}}list=list.substring(0, list.length-1); $( ctx ).parent().siblings( "input" ).val( list );}, remove: function( ctx ){var inputId=$( ctx ).siblings( "input" ).attr( "dra-input-id" ); delete this.testCaseList[ inputId]; this.store( ctx ); $( ctx ).parent().remove();}}</script>

TEST_TOOL_SELECT_KEY=Tool
TEST_TOOL_SELECT_DESC=sadjlfkjsd f<script id="dra-anchor">window.onload = function(){ dra.uiController.init(); }</script>
TEST_TOOL_OPTION_1_KEY=None
TEST_TOOL_OPTION_2_KEY=Mocha
TEST_TOOL_OPTION_3_KEY=Mocha Karma

TEST_LOG_FILE_KEY=Log File
TEST_LOG_FILE_DESC=
MINIMUM_SUCCESS_RATE_KEY=Minimum Success Rate
MINIMUM_SUCCESS_RATE_DESC=
CHECK_TEST_REGRESSION_KEY=Check for Regression
CHECK_TEST_REGRESSION_DESC=

COVERAGE_TOOL_SELECT_KEY=Coverage Tool
COVERAGE_TOOL_SELECT_DESC=
COVERAGE_TOOL_OPTION_1_KEY=None
COVERAGE_TOOL_OPTION_2_KEY=BlanketJS
COVERAGE_TOOL_OPTION_3_KEY=Istanbul

COVERAGE_LOG_FILE_KEY=Log File
COVERAGE_LOG_FILE_DESC=
MINIMUM_COVERAGE_RATE_KEY=Minimum Coverage Rate
MINIMUM_COVERAGE_RATE_DESC=
CHECK_COVERAGE_REGRESSION_KEY=Check for Regression
CHECK_COVERAGE_REGRESSION_DESC=
COVERAGE_REGRESSION_THRESHOLD_KEY=Coverage Regression Threshold
COVERAGE_REGRESSION_THRESHOLD_DESC=

CRITICAL_TESTCASES_KEY=DRA Critical Testcases
CRITICAL_TESTCASES_DESC=

EVENT_TYPE_KEY_1=Event Type for Event 1
EVENT_TYPE_KEY_2=Event Type for Event 2
EVENT_TYPE_KEY_3=Event Type for Event 3
EVENT_TYPE_DESC=Type of event being logged
FILE_KEY_1=Log File for Event 1
FILE_KEY_2=Log File for Event 2
FILE_KEY_3=Log File for Event 3
FILE_DESC=Location of the log file
SERVER_KEY_1=DRA Server for Event 1
SERVER_KEY_2=DRA Server for Event 2
SERVER_KEY_3=DRA Server for Event 3
SERVER_DESC=Deployment Risk Analytics server address

USER_ID_KEY=Username - DRA TEST
USER_ID_DESC=The Sauce Labs username.  Tests should use the SAUCE_USERNAME environment variable..

ACCESS_KEY=Access Key
ACCESS_KEY_DESC=The Sauce Labs access key.  Tests should use the SAUCE_ACCESS_KEY environment variable.

SELECT_CMD_KEY=Test Execution Command:
SELECT_CMD_DESC=Please select the test command that best fits the project test configuration.

EMPTY_KEY=\u0020 
NPM_KEY=npm test
GRUNT_KEY=grunt
GRUNT_T_KEY=grunt test
ANT_KEY=ant test
MVN_KEY=mvn test
CUSTOM_KEY=Custom...

COMMAND_KEY=Custom Test Execution Command:
COMMAND_DESC=Enter the command(s) used to execute the tests for the project.

ASSET_KEY=Download Selenium logs and job videos
ASSET_DESC=Choose whether to download Selenium logs and videos from jobs as artifacts.

DRA_KEY=Send Sauce Labs logs to DRA
DRA_DESC=Choose whether to the Sauce Labs log data to DRA for analytics.